#!/bin/bash

# ============================================
# Script de Test Local - Reset Weekly Credits
# ============================================
# Ce script permet de tester la fonction Edge Function localement
# avant le d√©ploiement en production.
#
# Usage: ./test-reset-credits.sh
# ============================================

set -e  # Exit on error

echo "üß™ Test Local - Reset Weekly Credits"
echo "===================================="
echo ""

# Couleurs pour l'output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Configuration
PROJECT_REF="${SUPABASE_PROJECT_REF:-YOUR_PROJECT_REF}"
ANON_KEY="${SUPABASE_ANON_KEY:-YOUR_ANON_KEY}"
SERVICE_ROLE_KEY="${SUPABASE_SERVICE_ROLE_KEY:-YOUR_SERVICE_ROLE_KEY}"

# V√©rifier les variables d'environnement
if [ "$PROJECT_REF" = "YOUR_PROJECT_REF" ]; then
  echo -e "${RED}‚ùå Erreur: SUPABASE_PROJECT_REF non d√©fini${NC}"
  echo "   D√©finir avec: export SUPABASE_PROJECT_REF=abcdefghijklmnop"
  exit 1
fi

if [ "$ANON_KEY" = "YOUR_ANON_KEY" ]; then
  echo -e "${RED}‚ùå Erreur: SUPABASE_ANON_KEY non d√©fini${NC}"
  echo "   D√©finir avec: export SUPABASE_ANON_KEY=eyJh..."
  exit 1
fi

# URL de la fonction
FUNCTION_URL="https://${PROJECT_REF}.supabase.co/functions/v1/reset-weekly-credits"

echo -e "${YELLOW}üìç URL de la fonction:${NC}"
echo "   $FUNCTION_URL"
echo ""

# Test 1: V√©rifier que la fonction est d√©ploy√©e
echo "Test 1: V√©rifier le d√©ploiement de la fonction..."
echo "------------------------------------------------"
HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
  --location --request POST "$FUNCTION_URL" \
  --header "Authorization: Bearer $ANON_KEY" \
  --header "Content-Type: application/json")

if [ "$HTTP_STATUS" -eq 200 ]; then
  echo -e "${GREEN}‚úÖ Fonction d√©ploy√©e et accessible (HTTP $HTTP_STATUS)${NC}"
else
  echo -e "${RED}‚ùå Fonction non accessible (HTTP $HTTP_STATUS)${NC}"
  exit 1
fi
echo ""

# Test 2: Ex√©cuter le reset et capturer la r√©ponse
echo "Test 2: Ex√©cuter le reset..."
echo "-----------------------------"
RESPONSE=$(curl -s --location --request POST "$FUNCTION_URL" \
  --header "Authorization: Bearer $ANON_KEY" \
  --header "Content-Type: application/json")

echo "R√©ponse brute:"
echo "$RESPONSE" | jq '.' 2>/dev/null || echo "$RESPONSE"
echo ""

# Parser la r√©ponse JSON
SUCCESS=$(echo "$RESPONSE" | jq -r '.success' 2>/dev/null || echo "false")
TOTAL=$(echo "$RESPONSE" | jq -r '.totalProcessed' 2>/dev/null || echo "0")
SUCCESS_COUNT=$(echo "$RESPONSE" | jq -r '.successCount' 2>/dev/null || echo "0")
ERROR_COUNT=$(echo "$RESPONSE" | jq -r '.errorCount' 2>/dev/null || echo "0")

if [ "$SUCCESS" = "true" ]; then
  echo -e "${GREEN}‚úÖ Reset r√©ussi !${NC}"
  echo "   ‚Ä¢ Total trait√©: $TOTAL abonnements"
  echo "   ‚Ä¢ Succ√®s: $SUCCESS_COUNT"
  echo "   ‚Ä¢ Erreurs: $ERROR_COUNT"
else
  echo -e "${RED}‚ùå Reset √©chou√©${NC}"
  ERROR_MESSAGE=$(echo "$RESPONSE" | jq -r '.error' 2>/dev/null || echo "Erreur inconnue")
  echo "   Erreur: $ERROR_MESSAGE"
  exit 1
fi
echo ""

# Test 3: V√©rifier les cr√©dits cr√©√©s dans la base
echo "Test 3: V√©rifier les cr√©dits dans la base..."
echo "----------------------------------------------"
echo -e "${YELLOW}üí° Ex√©cuter dans SQL Editor:${NC}"
echo ""
cat << 'SQL'
SELECT 
  sc.user_id,
  sc.credits_total,
  sc.credits_remaining,
  sc.week_start_date,
  sc.reset_at,
  sc.created_at,
  s.plan_id
FROM subscription_credits sc
JOIN subscriptions s ON s.id = sc.subscription_id
WHERE sc.created_at > NOW() - INTERVAL '5 minutes'
ORDER BY sc.created_at DESC;
SQL
echo ""

# Test 4: R√©sum√©
echo "Test 4: R√©sum√© des tests"
echo "-------------------------"
if [ "$ERROR_COUNT" -eq 0 ] && [ "$SUCCESS_COUNT" -gt 0 ]; then
  echo -e "${GREEN}‚úÖ Tous les tests r√©ussis !${NC}"
  echo ""
  echo "Prochaines √©tapes:"
  echo "1. V√©rifier les logs: supabase functions logs reset-weekly-credits"
  echo "2. Configurer le cron job (voir docs/CRON_JOB_DEPLOYMENT_GUIDE.md)"
  echo "3. Monitorer les ex√©cutions quotidiennes"
  exit 0
elif [ "$TOTAL" -eq 0 ]; then
  echo -e "${YELLOW}‚ö†Ô∏è  Aucun abonnement actif trouv√©${NC}"
  echo "   C'est normal si vous testez sur un environnement vide."
  echo "   Cr√©ez un abonnement test pour valider le flux complet."
  exit 0
else
  echo -e "${RED}‚ùå Des erreurs ont √©t√© d√©tect√©es${NC}"
  echo "   V√©rifier les logs: supabase functions logs reset-weekly-credits"
  exit 1
fi
