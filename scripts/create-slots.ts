#!/usr/bin/env tsx
/**
 * Script interactif pour cr√©er des cr√©neaux de collecte et livraison
 * 
 * Usage:
 *   pnpm slots:create
 * 
 * Configuration:
 *   Modifier les constantes SLOT_CONFIG ci-dessous pour personnaliser
 */

import { config } from "dotenv"
import { resolve } from "path"
import { createClient } from "@supabase/supabase-js"

// Charger les variables d'environnement depuis .env.local
config({ path: resolve(process.cwd(), ".env.local") })

// ============================================================================
// CONFIGURATION - Modifier ces valeurs selon vos besoins
// ============================================================================

interface SlotConfig {
  date: string // Format: YYYY-MM-DD
  startTime: string // Format: HH:MM
  endTime: string // Format: HH:MM
  label: string // Ex: "Matin", "Apr√®s-midi", "Soir√©e"
  createBoth?: boolean // true = cr√©er pickup ET delivery, false = uniquement pickup
  notes?: string // Notes optionnelles
}

const SLOT_CONFIG: SlotConfig[] = [
  // Semaine du 14-20 octobre 2025
  {
    date: "2025-10-14",
    startTime: "09:00",
    endTime: "12:00",
    label: "Matin",
    createBoth: true,
    notes: "Cr√©neau matinal - Mardi",
  },
  {
    date: "2025-10-14",
    startTime: "14:00",
    endTime: "17:00",
    label: "Apr√®s-midi",
    createBoth: true,
    notes: "Cr√©neau apr√®s-midi - Mardi",
  },
  {
    date: "2025-10-14",
    startTime: "18:00",
    endTime: "21:00",
    label: "Soir√©e",
    createBoth: true,
    notes: "Cr√©neau soir√©e - Mardi",
  },
  {
    date: "2025-10-16",
    startTime: "09:00",
    endTime: "12:00",
    label: "Matin",
    createBoth: true,
    notes: "Cr√©neau matinal - Jeudi",
  },
  {
    date: "2025-10-16",
    startTime: "14:00",
    endTime: "17:00",
    label: "Apr√®s-midi",
    createBoth: true,
    notes: "Cr√©neau apr√®s-midi - Jeudi",
  },
  {
    date: "2025-10-16",
    startTime: "18:00",
    endTime: "21:00",
    label: "Soir√©e",
    createBoth: true,
    notes: "Cr√©neau soir√©e - Jeudi",
  },
  {
    date: "2025-10-18",
    startTime: "16:00",
    endTime: "18:00",
    label: "Fin d'apr√®s-midi",
    createBoth: true,
    notes: "Cr√©neau fin d'apr√®s-midi - Samedi",
  },
  {
    date: "2025-10-18",
    startTime: "19:00",
    endTime: "21:00",
    label: "Soir√©e",
    createBoth: true,
    notes: "Cr√©neau soir√©e - Samedi",
  },
]

// ============================================================================
// CODE DU SCRIPT - Ne pas modifier sauf si vous savez ce que vous faites
// ============================================================================

interface Slot {
  role: "pickup" | "delivery"
  slot_date: string
  start_time: string
  end_time: string
  label: string
  is_open: boolean
  notes?: string
}

async function main() {
  console.log("üöÄ Script de cr√©ation de cr√©neaux logistiques\n")

  // V√©rifier les variables d'environnement
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
  const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY

  if (!supabaseUrl || !supabaseKey) {
    console.error("‚ùå Erreur: Variables d'environnement manquantes")
    console.error("   NEXT_PUBLIC_SUPABASE_URL:", supabaseUrl ? "‚úì" : "‚úó")
    console.error("   SUPABASE_SERVICE_ROLE_KEY:", supabaseKey ? "‚úì" : "‚úó")
    console.error("\nüí° Assurez-vous que votre fichier .env.local contient ces variables")
    process.exit(1)
  }

  const supabase = createClient(supabaseUrl, supabaseKey)

  console.log("üìã Configuration:")
  console.log(`   - ${SLOT_CONFIG.length} dates configur√©es`)
  console.log("")

  // Compter les slots √† cr√©er
  const totalSlots = SLOT_CONFIG.reduce((acc, config) => {
    return acc + (config.createBoth !== false ? 2 : 1)
  }, 0)

  console.log(`üìä ${totalSlots} cr√©neaux √† cr√©er:\n`)

  // Pr√©parer les slots
  const slotsToInsert: Slot[] = []

  for (const config of SLOT_CONFIG) {
    const baseSlot = {
      slot_date: config.date,
      start_time: config.startTime,
      end_time: config.endTime,
      label: config.label,
      is_open: true,
      notes: config.notes,
    }

    // Cr√©er le slot de collecte
    slotsToInsert.push({
      ...baseSlot,
      role: "pickup",
    })

    console.log(
      `   ‚úì Collecte - ${config.date} ${config.startTime}-${config.endTime} (${config.label})`
    )

    // Cr√©er le slot de livraison si demand√©
    if (config.createBoth !== false) {
      slotsToInsert.push({
        ...baseSlot,
        role: "delivery",
      })

      console.log(
        `   ‚úì Livraison - ${config.date} ${config.startTime}-${config.endTime} (${config.label})`
      )
    }
  }

  console.log("\n‚è≥ Insertion dans Supabase...")

  // Ins√©rer les slots
  const { data, error } = await supabase
    .from("logistic_slots")
    .insert(slotsToInsert)
    .select()

  if (error) {
    console.error("\n‚ùå Erreur lors de l'insertion:", error.message)
    console.error("   D√©tails:", error)
    process.exit(1)
  }

  console.log(`\n‚úÖ ${data?.length || 0} cr√©neaux cr√©√©s avec succ√®s!`)

  // Afficher un r√©sum√©
  console.log("\nüìä R√©sum√© par date:")
  const groupedByDate = slotsToInsert.reduce((acc, slot) => {
    if (!acc[slot.slot_date]) {
      acc[slot.slot_date] = { pickup: 0, delivery: 0 }
    }
    acc[slot.slot_date][slot.role]++
    return acc
  }, {} as Record<string, { pickup: number; delivery: number }>)

  Object.entries(groupedByDate)
    .sort(([a], [b]) => a.localeCompare(b))
    .forEach(([date, counts]) => {
      console.log(
        `   ${date}: ${counts.pickup} collecte(s) + ${counts.delivery} livraison(s)`
      )
    })

  console.log("\nüéâ Termin√©! Les cr√©neaux sont maintenant disponibles dans l'application.")
  console.log("   ‚Üí Testez sur: http://localhost:3000/reservation/guest (√©tape 3)\n")
}

// Ex√©cution
main().catch((error) => {
  console.error("\n‚ùå Erreur fatale:", error)
  process.exit(1)
})
